// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static int screen;
    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        let screen = 16384;
        let color = true;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while(i < 8192) {
            let screen[i] = false;
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, mask;
        let address = (32 * y) + (x / 16);
        let mask = Math.twoToThe(x & 15);
        if (color) {
            let screen[address] = screen[address] | mask;
        } else {
            let screen[address] = screen[address] & ~mask;
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, temp;
        if (x1 > x2) {
            let temp = x1;
            let x1 = x2;
            let x2 = temp;
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }
        let dx = x2 - x1;
        let dy = y2 - y1;
        if (dx = 0) {
            do Screen.drawVerticalLine(x1, y1, y2);
        } else {
            if (dy = 0) {
                do Screen.drawHorizontalLine(x1, x2, y1);
            } else {
                do Screen.drawDiagonalLine(x1, y1, x2, y2);
            }
        }
        return;
    }

    function void drawHorizontalLine(int x1, int x2, int y)  {
        var int startAddress, endAddress;
        var int x1b, x2b;
        let x1b = x1 & 15;
        let x2b = x2 & 15;
        let startAddress = (32 * y) + (x1 / 16);
        let endAddress = (32 * y) + (x2 / 16);
        if (x2b = 0) {
            let endAddress = endAddress - 1;
        }

        if (startAddress = endAddress) {
            do Screen.drawHorizontalLineInSameAddress(x1, x2, y);
        } else {
            if (x1b > 0) {
                do Screen.drawHorizontalLineInSameAddress(x1, x1 + 16 - x1b, y);
                let startAddress = startAddress + 1;
            }
            if (x2b > 0) {
                do Screen.drawHorizontalLineInSameAddress(x2 - x2b, x2, y);
                let endAddress = endAddress - 1;
            }
            while (~(startAddress > endAddress)) {
                let screen[startAddress] = color;
                let startAddress = startAddress + 1;
            }
        }
        return;
    }

    function void drawHorizontalLineInSameAddress(int x1, int x2, int y)  {
        while(~(x1 > x2)) {
            do Screen.drawPixel(x1, y);
            let x1 = x1 + 1;
        }
        return;
    }

    function void drawVerticalLine(int x, int y1, int y2) {
        var int ly;
        if (y1 > y2) {
            let ly = y1;
            let y1 = y2;
            let y2 = ly;
        }
        while (~(y1 > y2)) {
            do Screen.drawPixel(x, y1);
            let y1 = y1 + 1;
        }
        return;
    }

    function void drawDiagonalLine(int x1, int y1, int x2, int y2) {
        var int a, b, dx, dy;
        var int adyMinusbdx;
        let dx = x2 - x1;
        let dy = y2 - y1;
        if (dy > 0) {
            while (~(a > dx) & ~(b > dy)) {
                do Screen.drawPixel(x1 + a, y1 + b);
                if (adyMinusbdx < 0) {
                    let adyMinusbdx = adyMinusbdx + dx;
                    let b = b + 1;
                } else {
                    let adyMinusbdx = adyMinusbdx - dy;
                    let a = a + 1;
                }
            }
        } else {
            let dy = -dy;
            while (~(a > dx) & ~(b > dy)) {
                do Screen.drawPixel(x1 + a, y1 - b);
                if (adyMinusbdx < 0) {
                    let adyMinusbdx = adyMinusbdx + dy;
                    let a = a + 1;
                } else {
                    let adyMinusbdx = adyMinusbdx - dx;
                    let b = b + 1;
                }
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        while (~(y1 > y2)) {
            do Screen.drawHorizontalLine(x1, x2, y1);
            let y1 = y1 + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
    }
}
