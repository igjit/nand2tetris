// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {
    static Array memory, freeList;
    static int LENGTH, NEXT;

    /** Initializes the class. */
    function void init() {
        let LENGTH = 0;
        let NEXT = 1;
        let memory = 0;
        let freeList = 2048;
        let freeList[LENGTH] = 16383 - 2048;
        let freeList[NEXT] = null;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        return Memory.firstFit(size);
    }

    function int firstFit(int size) {
        var Array current;
        var int allocSize, newSize;
        let current = freeList;
        let allocSize = size + 1;
        while (~(current = null)) {
            if (current[LENGTH] > (allocSize + 1)) {
                let newSize = current[LENGTH] - allocSize;
                let current[LENGTH] = newSize;
                let current[newSize] = allocSize;
                return current + newSize + 1;
            }
            let current = current[NEXT];
        }
        // heap overflow
        do Sys.error(6);
        return 0;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array current;
        let current = freeList;
        while (~(current[NEXT] = null)) {
            let current = current[NEXT];
        }
        let current[NEXT] = o - 1;
        let o[NEXT] = null;
        return;
    }
}
